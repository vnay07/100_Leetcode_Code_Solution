// Question Link: https://leetcode.com/problems/merge-two-sorted-lists/

// Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* insertNode(ListNode* root, int key){
        ListNode* temp = new ListNode();
        temp->val = key;
        temp->next = NULL;
        if(root == NULL){
            return temp;
        }
        ListNode* itr = root;
        while(itr->next != NULL){
            itr = itr->next;
        }
        itr->next = temp;
        return root;
    }
    
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* resList = NULL;
        
        while(l1!=NULL && l2!=NULL){
            //If both l1 value and l2 value are same
            if(l1->val == l2->val){
                resList = insertNode(resList, l1->val);
                resList = insertNode(resList, l2->val);
                l1 = l1->next;
                l2 = l2->next;
            }
            //if l1 value is smaller than l2 value
            else if(l1->val < l2->val){
                resList = insertNode(resList, l1->val);
                l1 = l1->next;
            }
            //if l2 value is smaller than l1 value
            else{
                resList = insertNode(resList, l2->val);
                l2 = l2->next;
            }
        }
        // if l2 is NULL but l1 still has some element
        while(l1!=NULL){
            resList = insertNode(resList, l1->val);
            l1 = l1->next;
        }
        // if l1 is NULL but l2 has some element
        while(l2!=NULL){
            resList = insertNode(resList, l2->val);
            l2 = l2->next;
        }
        
        
        return resList;
    }
};
